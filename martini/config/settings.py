"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
APP_ENV = os.environ.get('APP_ENV')

# APP_ENV is set in docker-compose services only.
# In local develoment, we need to set the environment variables to access the database and Qdrant
# using "localhost" (the content of DJ_* environment variables) instead of the Docker container names.
if APP_ENV == 'local':
    os.environ['QDRANT_URL'] = os.environ.get('DJ_QDRANT_URL')
    # We are not using Celery in local development (yet), because of an segfault error
    # occurring when the local Celery worker tries to access Postgres (tested in M1 Macbook Pro).
    # But change the environment variables anyway, in case this is fixed in the future.
    os.environ['CELERY_BROKER_URL'] = os.environ.get('DJ_CELERY_BROKER_URL')
    os.environ['CELERY_RESULT_BACKEND'] = os.environ.get('DJ_CELERY_RESULT_BACKEND')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-nf6a&7k%wgd&pr4413awil^5hd04(*vkeyji$jp%@9-t_we*6o'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True if APP_ENV == 'local' else False

# Allowed hosts include localhost and web_nginx (the name of the nginx container).
ALLOWED_HOSTS = ['127.0.0.1', 'localhost', 'web_nginx']

# Ensure Django respects the header used to preserve the original host of the client request
# when proxying through a load balancer or other reverse proxy
# (necessary to allow web_nginx to be among the allowed hosts).
USE_X_FORWARDED_HOST = True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'drf_yasg',
    'config',
    'apps.documents',
    'apps.chats',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
POSTGRES_NAME_ENV_KEY = 'DJ_POSTGRES_NAME' if APP_ENV == 'local' else 'POSTGRES_DB'
POSTGRES_USER_ENV_KEY = 'DJ_POSTGRES_USER' if APP_ENV == 'local' else 'POSTGRES_USER'
POSTGRES_PASSWORD_ENV_KEY = 'DJ_POSTGRES_PASSWORD' if APP_ENV == 'local' else 'POSTGRES_PASSWORD'
POSTGRES_HOST_ENV_KEY = 'DJ_POSTGRES_HOST' if APP_ENV == 'local' else 'POSTGRES_HOST'
POSTGRES_PORT_ENV_KEY = 'DJ_POSTGRES_PORT' if APP_ENV == 'local' else 'POSTGRES_PORT'
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get(POSTGRES_NAME_ENV_KEY),
        'USER': os.environ.get(POSTGRES_USER_ENV_KEY),
        'PASSWORD': os.environ.get(POSTGRES_PASSWORD_ENV_KEY),
        'HOST': os.environ.get(POSTGRES_HOST_ENV_KEY),
        'PORT': os.environ.get(POSTGRES_PORT_ENV_KEY),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
UPLOAD_URL = 'static/uploads/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
MEDIA_ROOT = os.path.join(BASE_DIR, 'static', 'uploads')

# Media root from Docker container's perspective.
MEDIA_ROOT_DOCKER = '/app/martini/static/uploads'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [],
    'DEFAULT_AUTHENTICATION_CLASSES': [],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ]
}

MARTINI_DEFAULT_COLLECTION_NAME = 'default'
MARTINI_DEFAULT_TEXT_SPLITTER_CHUNK_SIZE = 500
MARTINI_DEFAULT_TEXT_SPLITTER_CHUNK_OVERLAP = 50
